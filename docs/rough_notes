SSO(def): [RFC 6749] SSO is an authentication process that allows a user to access multiple 
applications with one set of login credentials
--------------------Dr.Seo: [Technology, Policy, Standard, Product]

SSO comes under teh flag of Identity and access management (IAM). Main parts of IAM are:
1. Identity lifecycle management: All identities need to be created somehow, maintained over time (for example, job title changes when you get promoted), 
and retired when people leave your organization
2. Connectors for data collections:In this case, the data needed is very specific: identities, their 
attributes, and access.
3. Password Management: Nobody wants to remember dozens of different passwords and change all of them every 90 days, 
so identity governance and administration products help you manage them.
4. Access Request workflows: ....
further deatils present on:  https://medium.com/@graphidentity/what-is-identity-governance-and-administration-iga-fcb04b3e727a

Authentication:The process of verifying a claim that a system entity or
               system resource has a certain attribute value.
               An authentication process consists of two basic steps:
      -  Identification step: Presenting the claimed attribute value
         (e.g., a user identifier) to the authentication subsystem.
      -  Verification step: Presenting or generating authentication
         information (e.g., a value signed with a private key) that acts
         as evidence to prove the binding between the attribute and that
         for which it is claimed (user). 
 
 OAuth 2.0: authorization framework enables a third-party
            application to obtain limited access to an HTTP service,
 
 $ resource owner: An entity capable of granting access to a protected resource.
 When the resource owner is a person, it is referred to as an end-user. (User)
 $ client: An application making protected resource requests on behalf of the
 resource owner and with its authorization. (NYT)
 $ resource server: The server hosting the protected resources, capable of accepting
 and responding to protected resource requests using access tokens. (Google DB)
 $ authorization server: The server issuing access tokens to the client after successfully
 authenticating the resource owner and obtaining authorization. (Google)
 $ authorization grant:a credential representing the resource owner's 
 authorization (to access its protected resources) used by the
 client to obtain an access token.  This specification defines four
 grant types -- authorization code, implicit, resource owner password
 credentials, and client credentials
 $ redirect URL: During a user's authentication, the redirect_uri request 
 parameter is used as a callback URL. This is where your application 
 will receive and process the response from Auth0, and where the users will 
 be redirected, once the authentication is complete.
 $ access token:credentials used to access protected resources.  An
 access token is a string representing an authorization issued to the
 client.  The string is usually opaque to the client.  Tokens
 represent specific scopes and durations of access, granted by the
 resource owner, and enforced by the resource server and authorization
 server
 $ scopes:
 $ consent: 
 $ authentication: The process of verifying a claim that a system entity or
 system resource has a certain attribute value. [in OAuth: Authorization server authenticates the resource owner]
 $ authorization: An approval that is granted to a system entity to access a
 system resource. [in OAuth: the resource owner authorizes the client to access resource server]
 $ cookie: /HTTP/ Data exchanged between an HTTP server and a browser
 (a client of the server) to store state information on the client
 side and retrieve it later for server use.
 $ bearer token: A security token with the property that any party in possession of
 the token (a "bearer") can use the token in any way that any other party in possession of it can.  
 Using a bearer token does not require a bearer to prove possession of cryptographic key material(proof-of-possession).
----------------------------------------------------------------------------
Kerberos Protocol
Kerberos(def): provides a means of verifying the identities of principals,(e.g., a workstation user or a network server) on an open
(unprotected) network.
How unprotected is the network?
Needhamâ€“Schroeder protocol-------------future work
anything that uses kerberos service is a client
rlogin is not secure from eavesdropping or packet sniffing attack. also it doesn't provide user authentication.
masquearade attack
Who should be trusted in the netwrok: 1) trust kerberos  2) user trust works station
$ ticket: a record that helps authenticate client to server. it contains: client identity, session key, timestamp
$ KDC: a netwrok service that supplies tickets and temporary session keys. 
$ secret key: an encryption key shared by a prinicipal and the KDC, in case of humnas, it is the password
$ authenticator: a record containing information that can be shown to have been recently generated using the session
key known only by the client and server. it is created everytime new request is made.
----------------------
version4 weaknesses: 
1. offline password attack
2. DES encryption-- PCBC




